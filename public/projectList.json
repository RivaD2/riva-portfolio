[
  {
    "title": "Book Project",
    "img_url": "/images/book-project.jpg",
    "webm_url": "/images/book-project.webm",
    "mp4_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/book-project.mp4",
    "github_url":"https://github.com/Project-Books/book-project",
    "tools_used":"JavaScript, TypeScript, React, React Router DOM, Material-UI, CSS, CSS Grid, Flexbox, Java, mySQL, Spring Boot, Docker, and Maven",
    "text_desc":"Before graduating from Code Fellows I made it a personal goal to contribute regularly to an open source project and with Book Project I have achieved this goal. Due to my regular contributions and quality of work, I am now part of the front-end team. Based off mockups I've implemented several key features for this project, I help out with code reviews for the frontend, and continue to learn and grow with a great team.",
    "demo_desc": "Working on this project has introduced to me to new tools like Docker,  has allowed me to review Java code, and build React TypesScript components. I am really proud of the features I've built and I have learned so much from working on this open source project. \n\n Here you can see some of the work I've done: toggling the password; modals and the navbar; the delete account page; and a toggle switch for dark mode. Some challenges I've faced have been building frontend and backend JWT support in parallel across continents and building responsive designs based off fixed mockups."
  },
  {
    "title": "Aqaba",
    "img_url": "/images/aqaba.jpg",
    "webm_url": "/images/aqaba(1).webm",
    "mp4_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/aqaba.mp4",
    "github_url":"https://github.com/RivaD2/aqaba", 
    "deployed_url":"https://aqaba.rivadavidowski.com",
    "tools_used":"JavaScript, React, React-Spring, React Responsive Carousel, React Router DOM, OAuth 2.0 with Google APIs, Axios, Figma/FigJam, Material-UI, CSS3/CSS Flexbox, my API-server, Heroku (deployment of server), and AWS (deployment of the front-end)",
    "text_desc":"I chose to rebuild this fragrance site to gain familiarity with e-commerce flows and UI, and because of the complexity that all these features introduce. I am now in the process of making the site my own and am currently working with a professional UI designer to assist me with rebranding. This will include new mockups and styles using an original theme.",
    "demo_desc": "This ongoing project has allowed me to build more Functional components with React Hooks and Class-based components, but it's also helped to solidify my understanding of component hierarchy, state management, props, and responsive design. \n\n I have incorporated third-party libraries and frameworks (Material-UI) which gave me the opportunity to see how tools like these can increase efficiency, but also how they can introduce new challenges and complexity to our code. I continue to work on additional features, and future goals of this project include adding tests using React-Testing-Library with Jest, rebranding of the site for a more cohesive style, and saving carts to the database."
  },
  {
    "title": "The GIFing Game",
    "img_url": "/images/gifing-game.jpg",
    "webm_url": "images/gifing-game.webm",
    "mp4_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/gifing-game.mp4",
    "github_url":"https://github.com/RivaD2/box-challenge",
    "deployed_url":"https://gifing-game.rivadavidowski.com",
    "tools_used":"JavaScript, React, React Animated CSS, CSS Grid/Flexbox, Axios, GIPHY API and AWS",
    "text_desc":" The GIFing Game is fun and interactive memory game.\n\n A modal displays instructions on how to play and it can be customized based off the search term entered. The goal of this game is of course to find the matching pairs of GIFs in the lowest amount of clicks. Clicks are counted and the user's best score is stored in localStorage. When two GIFs are matched, they disappear.",
    "demo_desc": "I am a GIF lover and wanted to build a fun but simple game with React. This ongoing project is built solely with Functional components and uses React's Hook system.\n\n The purpose of this project is to focus on core React principles, work with a third-party library (GIPHY API), and practice user interaction with state management. The project originally started out as a simple grid of boxes that could be clicked on. Throughout each phase I added new features and functionality and it has morphed into a fun and interactive game that be customized."
  },
  {
    "title": " My Portfolio",
    "img_url": "/images/portfolio-home.jpg",
    "webm_url": "",
    "mp4_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/portfolio-demo.mp4",
    "github_url":"https://github.com/RivaD2/riva-portfolio", 
    "deployed_url":"https://www.rivadavidowski.com/",
    "tools_used":"JavaScript, React, CSS3/CSS Flexbox, Nasa Image and Video Library API, Axios, React Router DOM, Figma, Semantic-UI, and AWS for project deployment",
    "text_desc":"Look familiar? My responsive developer portfolio showcases projects I'm currently working on and my individual contributions to past projects I had the opportunity to work on while in coding bootcamp. My portfolio is built entirely from scratch and I am currently in the process of working with UI designer on polishing and refining the visual design. Check back soon!",
    "demo_desc": "During this ongoing project, I've built all components from scratch (modals, buttons, navigation etc.), gained exposure to SVG's and various video formats, continued to explore asynchronous methods and AJAX calls, and incorported both Class-based and Functional components using React. I've seen firsthand how reusable components can transform an application and how my code has evolved from one project to the next."
  },
  {
    "title": "Greener", 
    "img_url": "/images/greenerLogin.jpg",
    "webm_url": "/images/greenerLogin.webm",
    "mp4_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/greenerLogin.mp4",
    "github_url":"https://github.com/RivaD2/GreenerFrontEnd",
    "tools_used":"JavaScript, CSS, React Native, Redux, Expo, Sign In With Google, Google App Auth, Axios",
    "text_desc":"A casual game app modeled after Tamagatchi designed to help people relax.\nThe app allows the user to perform actions on a plant to gain currency for upgrading and expanding their terrarium. Login is possible through form submission or OAuth.",
    "demo_desc":"Through this week-long project I implemented front-end to back-end OAuth via Google.I refactored duplicated logic into a standalone component for reuse, and created the action buttons that reward in-game currency to the user. \n \n Working on this project solidified to me the importance of writing clean code and provided insight into coding patterns and how to manage feature tasks progress."
  },
  {
    "title": "Project Pinstrat", 
    "img_url": "images/pinstrat.jpg",
    "webm_url":"/images/pinstrat.webm", 
    "mp4_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/pinstrat.mp4",
    "github_url":"https://github.com/RivaD2/project-pinstrat",
    "tools_used":"JavaScript, MongoDB, Mongoose, Bcrypt, Express.js, Node.js",
    "text_desc":"Project Pinstrat involved building a back-end server and database interface for Pinstrat (our client, an existing in-production application) as well as encrypting HTTP request data and filtering results.",
    "demo_desc": "For this project I took on the role of project manager and was responsible for communicating client needs to the rest of our team. I also set up the CRUD routes, the database and the MongoDB Schema and Model.\n \n Pinstrat provides customized gameplay feedback to users from a game-generated hash. I worked with the client to implement encryption on the request to prevent access to game data that players haven't unlocked during gameplay. \n \n  Originally, the client was using game data hardcoded in a JSON file and shipped with the app. It was our task to create a database so the game data could be dynamic and secure."
  },
  {
    "title": "Movie Night", 
    "img_url": "./images/home.jpg",
    "webm_url": "https://s3-us-west-2.amazonaws.com/nazarov.artemexmachina.com/rivad2/movie-night.webm",
    "mp4_url": "/images/movie-night.mp4",
    "github_url":"https://github.com/RivaD2/Movie-Night",
    "deployed_url":"https://riva-movie-night.herokuapp.com/",
    "tools_used":"JavaScript, CSS3, PostgreSQL (originally used), EJS, Express.js, Axios, MongoDB, the Movie Database API (TMDb), and Heroku (for deployment).",
    "text_desc":"Movie Night makes it easy for a user to pick a movie from a recommendation list based on ratings. The user can find top-rated movies and add them to a watchlist.",
    "demo_desc": "I took the lead role in the overall styling of this project and created the MovieDetail page, which presents movie information and the option to add it to the watchlist, and refactored the Watchlist page, which enables a user to see and delete movies from the watchlist. \n\n Initially this reponsive app used Superagent to query the Movie Database API and fetch from the local PostgreSQL database. Recently I migrated the backend from PostgreSQL to my personal MongoDB API server by creating a new Mongoose Schema and Model to mirror the table from PostgreSQL. From there, I refactored the routes to use Axios instead of Superagent."
  }
]

